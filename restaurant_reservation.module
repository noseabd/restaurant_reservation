<?php
/**
 * @file
 * Code for the Restaurant Reservation feature.
 */

include_once 'restaurant_reservation.features.inc';
include_once 'restaurant_reservation.alter.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */ 
function restaurant_reservation_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_init().
 */
function restaurant_reservation_init() {
  // Display a message if there are new resevations.
  if (user_access('administer reservation') && panopoly_config_get('reservation_show_notifications')) {
    $pending_reservations = restaurant_reservation_get_reservations_for_status('pending');
    if ($count = count($pending_reservations)) {
      $message = t('There @are <strong>@count</strong> pending @reservations. !link to administer reservations.', array(
        '@are' => format_plural($count, t('is'), t('are')),
        '@reservations' => format_plural($count, t('reservation'), t('reservations')),
        '@count' => $count,
        '!link' => l(t('Click here'), 'admin/reservations/manage/pending'),
      ));
      drupal_set_message($message, 'warning', FALSE);
    }
  }

  // Redirect to reservation admin page when viewing the node.
  if ($node = menu_get_object()) {
    if ($node->type == 'reservation' && arg(2) == '' && !drupal_match_path(current_path(), 'admin/reservations/view/*')) {
      drupal_goto('admin/reservations/view/' . $node->nid);
    }
  }
}

/**
 * Implements hook_menu().
 */
function restaurant_reservation_menu() {

  $items['admin/reservations/add'] = array(
    'title' => 'Add Reservation',
    'weight' => 10,
    'page callback' => 'restaurant_reservation_add_reservation_admin',
    'access arguments' => array('administer reservations'),
    'file' => 'restaurant_reservation.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/reservations/manage'] = array(
    'title' => 'Manage reservations',
    'weight' => 20,
    'page callback' => 'restaurant_reservation_manage_reservations_admin',
    'access arguments' => array('administer reservations'),
    'file' => 'restaurant_reservation.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/reservations/calendar'] = array(
    'title' => 'Calendar',
    'weight' => 30,
    'page callback' => 'restaurant_reservation_calendar_admin',
    'access arguments' => array('administer reservations'),
    'file' => 'restaurant_reservation.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function restaurant_reservation_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'admin/reservations/add' on 'admin/reservations' page.
  if (drupal_match_path($root_path, "admin/reservations\nadmin/reservations/*")) {
    $item = menu_get_item('admin/reservations/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function restaurant_reservation_permission() {
  return array(
    'administer reservation' => array(
      'title' => t('Administer Reservations'),
      'description' => t('Access the reservation admininstration pages and manage reservations.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function restaurant_reservation_theme() {
  return array(
    'restaurant_reservation_status' => array(
      'variables' => array('status' => NULL),
      'file' => 'restaurant_reservation.theme.inc',
    ),
    'reservation_calendar_field' => array(
      'variables' => array('reservation' => NULL, 'text' => NULL),
      'file' => 'restaurant_reservation.theme.inc',
    ),
  );
}

/**
 * Implements hook_view_mode_templates().
 */
function restaurant_reservation_view_mode_templates() {
  return array(
    'node__reservation',
  );
}

/**
 * Implements hook_node_update().
 */
function restaurant_reservation_node_update($node) {
  if ($node->type == 'reservation') {
    $current_status = entity_metadata_wrapper('node', $node)->field_reservation_status->value();
    $old_status = entity_metadata_wrapper('node', $node->original)->field_reservation_status->value();

    // If status has been updated, send an mail.
    if ($current_status != $old_status) {
      restaurant_reservation_send_update_status_mail($node);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function restaurant_reservation_node_insert($node) {
  if ($node->type == 'reservation') {
    $current_status = entity_metadata_wrapper('node', $node)->field_reservation_status->value();
    restaurant_reservation_send_update_status_mail($node);
  }
}

/**
 * Sends an email for a reservation status change.
 */
function restaurant_reservation_send_update_status_mail($reservation) {
  $current_status = entity_metadata_wrapper('node', $reservation)->field_reservation_status->value();
  $mail = _restaurant_reservation_get_mail_for_status($current_status);

  $params['subject'] = $mail['subject'];
  $params['body'] = $mail['body'];

  // Append the reservation number to the subject.
  // TODO: Tokenize this.
  $reservation_number = entity_metadata_wrapper('node', $reservation)->field_reservation_number->value();
  $params['subject'] = '[Reservation ' . $reservation_number . '] ' . $params['subject'];

  // For now, let's just attach the node display to the body.
  // TODO: Tokenize this. Add HTML support.
  $params['body'] .= drupal_render(node_view($reservation));

  $to = entity_metadata_wrapper('node', $reservation)->field_reservation_email->value();
  $lang = language_default();

  return drupal_mail('restaurant_mail', 'restaurant_mail', $to, $lang, $params);
}

function _restaurant_reservation_get_mail_for_status($status = '') {
  $mail = array();

  // Get mail for each status.
  $statuses = restaurant_reservation_get_statuses();
  foreach ($statuses as $name => $title) {
    $mail[$name]['subject'] = panopoly_config_get('reservation_mail_' . $name . '_subject');
    $mail[$name]['body'] = panopoly_config_get('reservation_mail_' . $name . '_body');
  }

  return isset($mail[$status]) ? $mail[$status] : $mail;
}

/**
 * Implements hook_panopoly_config_info().
 */
function restaurant_reservation_panopoly_config_info() {
  $config = array();
  
  $config['reservation_show_notifications'] = array(
    'title' => t('Show notifications'),
    'description' => t('If enable, the module will show a notification for new reservations.'),
    'type' => 'boolean',
    'default' => TRUE,
  );

  $config['reservation_number_prefix'] = array(
    'title' => t('Reservation number prefix'),
    'description' => t('Prefix to use for reservation numbers. Example RN, RESERVATION.'),
    'type' => 'string',
    'require' => TRUE,
    'default' => 'RN',
  );

  $statuses = restaurant_reservation_get_statuses();
  foreach ($statuses as $name => $status) {
    $config['reservation_mail_' . $name . '_[mail_part]'] = array(
      'title' => t('Email for @name reservations', array('@name' => $name)),
      'description' => t('Message for reservation @name email. The reservation number and the reservation details will be added to the message.', array('@name' => $name)),
      'type' => 'mail_text',
      'require' => TRUE,
    );
  }

  $info = array(
    'reservation' => array(
      'title' => t('Reservation system'),
      'description' => t('Configuration for the Reservation system'),
      'weight' => 50,
      'config' => $config,
    ),
  );

  return $info;
}

/**
 * Implements hook_preprocess().
 */
function restaurant_reservation_preprocess_views_view_table(&$variables) {
  $view = $variables['view'];
  if ($view->name == 'administration_reservations') {
    $rows = &$variables['rows'];
    foreach ($rows as &$row) {
      $status = $row['field_reservation_status'];
      // Theme status with colored labels.
      $row['field_reservation_status'] = theme('restaurant_reservation_status', array('status' => $status));
    }
  }

  // Add css.
  drupal_add_css(drupal_get_path('module', 'restaurant_reservation') . '/css/restaurant_reservation.css');
}

/**
 * Computed field compute callback.
 */
function computed_field_field_reservation_number_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  // Return if not empty.
  if (!empty($entity_field[0]['value'])) {
    return $entity_field[0]['value'];
  }

  // Generate a unique id.
  $reservation_nid = $entity->nid;
  $reservation_number = _restaurant_reservation_get_unique_id($reservation_nid);

  // Make sure reservation number is unique.
  while (_restaurant_reservation_number_exists($reservation_number)) {
    $reservation_number = _restaurant_reservation_get_unique_id($reservation_nid);
  }

  $entity_field[0]['value'] = $reservation_number;
}

/**
 * Computed field compute callback.
 */
function computed_field_field_reservation_number_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  return $entity_field_item['value'];
}

/**
 * Available statuses.
 *
 * @param $reverse
 *  If TRUE, array_flip is applied to the return array.
 */
function restaurant_reservation_get_statuses($reverse = FALSE) {
  // Get values from field.
  $info = field_info_field('field_reservation_status');
  $statuses = isset($info['settings']['allowed_values']) ? $info['settings']['allowed_values'] : array();

  if ($reverse) {
    $statuses = array_flip($statuses);
  }

  return $statuses;
}

/**
 * Colors for statuses.
 *
 * @param $status
 *  The status of the reservations to find. pending, confirmed or cancelled.
 */
function _restaurant_reservation_get_status_color($status) {
  $colors = array(
    'pending' => 'info',
    'confirmed' => 'success',
    'cancelled' => 'danger',
  );

  return isset($colors[$status]) ? $colors[$status] : 'info';
}

/**
 * Finds all reservations for a given status.
 *
 * @param $status
 *  The status of the reservations to find. pending, confirmed or cancelled.
 * @param $load
 *  If TRUE, the full node object is loaded.
 * @return
 *  An array of reservations.
 */
function restaurant_reservation_get_reservations_for_status($status, $load = FALSE) {
  $query = db_select('node', 'n');
  $query->join('field_data_field_reservation_status', 'rs', 'n.nid = rs.entity_id');
  $query->condition('field_reservation_status_value', $status);
  $query->fields('rs', array('entity_id'));

  $results = $query->execute()
    ->fetchAllAssoc('entity_id');

  if (count($results) && $load) {
    foreach ($results as $entity_id => $result) {
      $results[$entity_id] = node_load($entity_id);
    }
  }

  return $results;
}

/**
 * Changes the status for a reservation.
 *
 * @param $reservation_id
 *  The id of the reservation.
 * @param $status
 *  The new status of the reservations.
 * @return
 *  TRUE if status has been successfully changed.
 */
function restaurant_reservation_update_status_for_reservation($reservation_id, $status) {
  $node = node_load($reservation_id);

  // Update the status for the node.
  $node->field_reservation_status[LANGUAGE_NONE][0]['value'] = $status;

  // Save the node.
  node_save($node);

  return ($node->field_reservation_status[LANGUAGE_NONE][0]['value'] == $status);
}

/**
 * Generates a random unique id for a reservation number.
 *
 * @param $nid
 *  The node id of the reservation node.
 *
 * @return
 *  A unique id.
 */
function _restaurant_reservation_get_unique_id($nid) {
  $salt = drupal_get_hash_salt();
  $hash = md5($salt . $nid . time());
  return panopoly_config_get('reservation_number_prefix') . substr($hash, rand(0, strlen($hash) - 5), 5);
}

/**
 * Checks if a reservation number exists.
 *
 * @param $reservation_number
 *  The reservation number.
 *
 * @return BOOLEAN
 *  TRUE if the number exists.
 */
function _restaurant_reservation_number_exists($reservation_number) {
  $reservation_number = db_select('field_data_field_reservation_number', 'rn')
    ->fields('rn', array('field_reservation_number_value'))
    ->condition('field_reservation_number_value', $reservation_number)
    ->execute()
    ->fetchField();

  return (!empty($reservation_number)) ? TRUE : FALSE;
}
