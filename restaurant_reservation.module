<?php
/**
 * @file
 * Code for the Restaurant Reservation feature.
 */

include_once 'restaurant_reservation.features.inc';
include_once 'restaurant_reservation.alter.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */ 
function restaurant_reservation_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_init().
 */
function restaurant_reservation_init() {
  // Display a message if there are new resevations.
  if (user_access('administer reservation')) {
    $pending_reservations = restaurant_reservation_get_reservations_for_status('pending');
    if ($count = count($pending_reservations)) {
      $message = t('There @are <strong>@count</strong> pending @reservations. !link to administer reservations.', array(
        '@are' => format_plural($count, t('is'), t('are')),
        '@reservations' => format_plural($count, t('reservation'), t('reservations')),
        '@count' => $count,
        '!link' => l(t('Click here'), 'admin/reservations/pending'),
      ));
      drupal_set_message($message, 'warning', FALSE);
    }
  }
}

/**
 * Implements hook_permission().
 */
function restaurant_reservation_permission() {
  return array(
    'administer reservation' => array(
      'title' => t('Administer Reservations'),
      'description' => t('Access the reservation admininstration pages and manage reservations.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function restaurant_reservation_theme() {
  return array(
    'restaurant_reservation_status' => array(
      'variables' => array('status' => NULL),
      'file' => 'restaurant_reservation.theme.inc',
    ),
  );
}

/**
 * Implements hook_preprocess().
 */
function restaurant_reservation_preprocess_views_view_table(&$variables) {
  $view = $variables['view'];
  if ($view->name == 'administration_reservations') {
    $rows = &$variables['rows'];
    foreach ($rows as &$row) {
      $status = $row['field_reservation_status'];
      $row['field_reservation_status'] = theme('restaurant_reservation_status', array('status' => $status));
    }
  }

  // Add css.
  drupal_add_css(drupal_get_path('module', 'restaurant_reservation') . '/css/restaurant_reservation.css');
}

/**
 * Colors for statuses.
 */
function _restaurant_reservation_get_status_color($status) {
  $colors = array(
    'Pending' => 'info',
    'Confirmed' => 'success',
    'Cancelled' => 'danger',
  );

  return isset($colors[$status]) ? $colors[$status] : 'info';
}

/**
 * Finds all reservations for a given status.
 *
 * @param $status
 *  The status of the reservations to find. pending, confirmed or cancelled.
 * @param $load
 *  If TRUE, the full node object is loaded.
 * @return
 *  An array of reservations.
 */
function restaurant_reservation_get_reservations_for_status($status, $load = FALSE) {
  $query = db_select('node', 'n');
  $query->join('field_data_field_reservation_status', 'rs', 'n.nid = rs.entity_id');
  $query->condition('field_reservation_status_value', $status);
  $query->fields('rs', array('entity_id'));

  $results = $query->execute()
    ->fetchAllAssoc('entity_id');

  if (count($results) && $load) {
    foreach ($results as $entity_id => $result) {
      $results[$entity_id] = node_load($entity_id);
    }
  }

  return $results;
}

/**
 * Changes the status for a reservation.
 *
 * @param $reservation_id
 *  The id of the reservation.
 * @param $status
 *  The new status of the reservations.
 * @return
 *  TRUE if status has been successfully changed.
 */
function restaurant_reservation_update_status_for_reservation($reservation_id, $status) {
  $node = node_load($reservation_id);

  // Update the status for the node.
  $node->field_reservation_status[LANGUAGE_NONE][0]['value'] = $status;

  // Save the node.
  node_save($node);

  return ($node->field_reservation_status[LANGUAGE_NONE][0]['value'] == $status);
}
